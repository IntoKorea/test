# Ex01-05_string.py

'''
# 컴퓨터 기본 단위
- 1 bit : 0 or 1 둘 중 하나만 저장할 수 있는 컴퓨터의 최소 데이터 단위
  8 bit : 1byte -> -128 ~ 127, 0 ~ 255( Ipv4 주소체계는 플러스 범위만 씀)
          2byte -> -32768 ~ 32767, 0 ~ 65535

# 문자열
- 여러개의 문자로 이루어진 데이터의 집합입니다.
- 프로그램 코드에서 문자를 사용하기 위해서 문자변환 규약표를 만들었습니다.

# 아스키코드( ASCII )
- C 계열 언어에서의 기본 문자변환 방식
(128개의 문자 처리. 일부 특수문자, 영문 이외는 적용 안됨. 영문 이외의 값은 유니코드 체계를 따름.)
(1byte표현 256개)

# 유니코드( Unicode )
- 전 세계의 모든 문자를 컴퓨터에서 다룰 수 있도록 설계된 국제 표준 문자 처리 방식입니다.
- 파이썬, 자바의 기본 문자변환 방식
(2byte표현 65536개)
'''




'''
문자열을 여러줄로 출력
'''

print('''print() 안에 외따옴표 3개를 사용하면
여러줄의 문자열을
한번에 출력할 수 있습니다!''')
print()


'''
문자열끼리 서로 더하거나 곱할 수 있습니다.
'''

# 문자열 결합 (문자열을 '+'하면 서로 결합됩니다.)
s_1 = "문자열"
s_2 = "결합"
print(s_1 + s_2)
print()

# 문자열 반복 (문자열을 '*'하면 그 수만큼 반복해서 결합합니다.)
print(s_1 * 3)


#-------------------------------------------------------------------------------------

'''
# 문자열은 문자들의 집합이기 때문에 특정위치의 문자를 선택해서 사용할 수 있습니다.
- 문자의 위치는 [숫자]를 사용하고 0부터 시작해서 1씩 증가합니다.
- 파이썬의 인덱스 값은 음수(-) 를 사용할 수 있으며,
  마지막 문자위치를 -1부터 시작해서 역순으로 증가합니다.
'''

#   +     0123456 7 8 9
nation = 'korea 대한민국'
#   -     10987654 3 2 1
print(f"nation {nation}")
print(f"nation[0] {nation[0]}")
print(f"nation[9] {nation[9]}")
print(f"nation[-1] {nation[-1]}")

# len() : 문자열 길이를 계산해주는 함수
print(f"nation 문자수 : {len(nation)}" )

